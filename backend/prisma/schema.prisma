// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum senderType {
  user
  provider
}

enum bookingStatus {
  pending
  accepted
  rejected
  completed
  notcompleted
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  phone    String    @unique @db.VarChar(15)
  password String
  lat      Float?
  lon      Float?
  profile  String?
  message  Message[]
  bookings Booking[]
}

model Provider {
  id                 Int       @id @default(autoincrement())
  name               String
  phone              String    @unique @db.VarChar(15)
  password           String
  address            String?
  city               String?
  lat                Float?
  lon                Float?
  profile            String?
  document           String?
  bio                String?
  varificationStatus String    @default("pending")
  services           Service[]
  message            Message[]
  bookings           Booking[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String?
  services Service[]
}

model Service {
  id            Int       @id @default(autoincrement())
  category_id   Int
  name          String
  description   String?
  ratePerHr     Float
  service_image String?
  bookings      Booking[]
  category      Category  @relation(fields: [category_id], references: [id])
  Provider      Provider? @relation(fields: [providerId], references: [id])
  providerId    Int?
}

model Message {
  id          Int        @id @default(autoincrement())
  user_id     Int
  provider_id Int
  message     String
  sender      senderType
  SentAt      DateTime   @default(now())
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  provider    Provider   @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model Booking {
  id            Int           @id @default(autoincrement())
  user_id       Int
  provider_id   Int?
  service_id    Int
  scheduledDate DateTime
  booked_at     DateTime      @default(now())
  status        bookingStatus @default(pending)
  paymentStatus String
  rating        Int
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  provider      Provider?     @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  service       Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
}
