generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum senderType {
  user
  provider
}

enum bookingStatus {
  pending
  accepted
  rejected
  completed
  inprogress
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  phone    String    @unique @db.VarChar(15)
  password String
  lat      Float?
  lon      Float?
  profile  String?
  message  Message[]
  bookings Booking[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String
  password String
}

model Provider {
  id                 Int               @id @default(autoincrement())
  name               String
  phone              String            @unique @db.VarChar(15)
  email              String?
  password           String
  ratePerHr          Float?
  address            String?
  city               String?
  lat                Float?
  lon                Float?
  profile            String?
  document           String?
  bio                String? //details
  verificationStatus String            @default("pending")
  services           ProviderService[]
  message            Message[]
  bookings           Booking[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String?
  services Service[]
}

model Service {
  id            Int               @id @default(autoincrement())
  categoryId    Int
  name          String
  description   String?
  minimumCharge Float
  avgRatePerHr  Float
  service_image String?
  bookings      Booking[]
  category      Category          @relation(fields: [categoryId], references: [id])
  providers     ProviderService[]
}

model ProviderService {
  providerId Int
  serviceId  Int
  provider   Provider @relation(fields: [providerId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@id([providerId, serviceId]) // Composite primary key
}

model Message {
  id         Int        @id @default(autoincrement())
  userId     Int
  providerId Int
  message    String
  sender     senderType
  SentAt     DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   Provider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Booking {
  id            Int           @id @default(autoincrement())
  userId        Int
  providerId    Int?
  serviceId     Int
  scheduledDate DateTime?     @default(now())
  bookedAt      DateTime      @default(now())
  bookingStatus bookingStatus @default(pending)
  paymentStatus String        @default("unpaid")
  amount        Float?
  rating        Int?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider      Provider?     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service       Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}
