generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  user
  provider
}

enum bookingStatus {
  pending
  confirmed
  completed
  cancelled
  rejected
}

enum status {
  pending
  verified
  rejected
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  phone        String         @unique @db.VarChar(15)
  password     String
  lat          Float?
  lon          Float?
  profile      String?
  message      Message[]
  bookings     Booking[]
  Notification Notification[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String
  password String
}

model Provider {
  id                 Int               @id @default(autoincrement())
  name               String
  phone              String            @unique @db.VarChar(15)
  email              String?
  averageRating      Float?
  password           String
  ratePerHr          Float?
  address            String?
  city               String?
  lat                Float?
  lon                Float?
  profile            String?
  bio                String?
  verificationStatus status            @default(pending)
  documentId         Int?
  services           ProviderService[]
  message            Message[]
  bookings           Booking[]
  document           Document?
  isFirstTime        Boolean           @default(true)
  Notification       Notification[]
}

model Document {
  id         Int       @id @default(autoincrement())
  providerId Int       @unique
  name       String
  comment    String?
  status     status    @default(pending)
  uploadedAt DateTime  @default(now())
  lastReview DateTime? @updatedAt
  provider   Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String?
  services Service[]
}

model Service {
  id            Int               @id @default(autoincrement())
  categoryId    Int
  name          String
  description   String?
  minimumCharge Float?
  avgRatePerHr  Float?
  service_image String?
  bookings      Booking[]
  providers     ProviderService[]
  category      Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model ProviderService {
  providerId Int
  serviceId  Int
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([providerId, serviceId])
}

model Message {
  id         Int      @id @default(autoincrement())
  userId     Int
  providerId Int
  message    String
  sender     role
  SentAt     DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Booking {
  id            Int           @id @default(autoincrement())
  userId        Int
  providerId    Int?
  serviceId     Int
  scheduledDate DateTime?     @default(now())
  bookedAt      DateTime      @default(now())
  bookingStatus bookingStatus @default(pending)
  paymentStatus String        @default("unpaid")
  address       String?
  city          String?
  lat           Float?
  lon           Float?
  amount        Float?
  rating        Int?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider      Provider?     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service       Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model PushToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  role      role
  token     String   @unique
  createdAt DateTime @default(now())
}

model Notification {
  id         Int      @id @default(autoincrement())
  userId     Int?
  providerId Int?
  title      String
  body       String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
